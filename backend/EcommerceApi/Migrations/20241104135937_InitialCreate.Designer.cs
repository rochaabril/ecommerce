// <auto-generated />
using System;
using EcommerceApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceApi.Migrations
{
    [DbContext(typeof(tienda_mayoristaContext))]
    [Migration("20241104135937_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CategoriaProducto", b =>
                {
                    b.Property<int>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("Categoria_Id");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("Producto_Id");

                    b.HasKey("CategoriaId", "ProductoId")
                        .HasName("PK__Categori__00D810271367E606");

                    b.HasIndex("ProductoId");

                    b.ToTable("Categoria_Producto", (string)null);
                });

            modelBuilder.Entity("EcommerceApi.Data.Carrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("Usuario_Id");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Carrito", (string)null);
                });

            modelBuilder.Entity("EcommerceApi.Data.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("EcommerceApi.Data.ItemCarrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CarritoId")
                        .HasColumnType("int")
                        .HasColumnName("Carrito_Id");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("Producto_Id");

                    b.HasKey("Id");

                    b.HasIndex("CarritoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("Item_Carrito", (string)null);
                });

            modelBuilder.Entity("EcommerceApi.Data.ItemOrdene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("OrdenId")
                        .HasColumnType("int")
                        .HasColumnName("Orden_Id");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("Producto_Id");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrdenId");

                    b.HasIndex("ProductoId");

                    b.ToTable("Item_Ordenes", (string)null);
                });

            modelBuilder.Entity("EcommerceApi.Data.Ordene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("Usuario_Id");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Ordenes");
                });

            modelBuilder.Entity("EcommerceApi.Data.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CantidadMinima")
                        .HasColumnType("int");

                    b.Property<string>("ImagenUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("Stock")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("EcommerceApi.Data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EcommerceApi.Data.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailVerificado")
                        .HasColumnType("bit")
                        .HasColumnName("Email_Verificado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RememberToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Remember_Token");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Whatsapp")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__Usuarios__A9D10534060DEAE8")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("CategoriaProducto", b =>
                {
                    b.HasOne("EcommerceApi.Data.Categoria", null)
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .IsRequired()
                        .HasConstraintName("FK_Categoria_Producto_Categoria");

                    b.HasOne("EcommerceApi.Data.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_Categoria_Producto_Producto");
                });

            modelBuilder.Entity("EcommerceApi.Data.Carrito", b =>
                {
                    b.HasOne("EcommerceApi.Data.Usuario", "Usuario")
                        .WithMany("Carritos")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_Carrito_Usuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcommerceApi.Data.ItemCarrito", b =>
                {
                    b.HasOne("EcommerceApi.Data.Carrito", "Carrito")
                        .WithMany("ItemCarritos")
                        .HasForeignKey("CarritoId")
                        .IsRequired()
                        .HasConstraintName("FK_Item_Carrito_Carrito");

                    b.HasOne("EcommerceApi.Data.Producto", "Producto")
                        .WithMany("ItemCarritos")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_Item_Carrito_Producto");

                    b.Navigation("Carrito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("EcommerceApi.Data.ItemOrdene", b =>
                {
                    b.HasOne("EcommerceApi.Data.Ordene", "Orden")
                        .WithMany("ItemOrdenes")
                        .HasForeignKey("OrdenId")
                        .IsRequired()
                        .HasConstraintName("FK_Item_Ordenes_Ordenes");

                    b.HasOne("EcommerceApi.Data.Producto", "Producto")
                        .WithMany("ItemOrdenes")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_Item_Ordenes_Productos");

                    b.Navigation("Orden");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("EcommerceApi.Data.Ordene", b =>
                {
                    b.HasOne("EcommerceApi.Data.Usuario", "Usuario")
                        .WithMany("Ordenes")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_Ordenes_Usuarios");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcommerceApi.Data.Usuario", b =>
                {
                    b.HasOne("EcommerceApi.Data.Role", "Role")
                        .WithMany("Usuarios")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Usuarios_Roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EcommerceApi.Data.Carrito", b =>
                {
                    b.Navigation("ItemCarritos");
                });

            modelBuilder.Entity("EcommerceApi.Data.Ordene", b =>
                {
                    b.Navigation("ItemOrdenes");
                });

            modelBuilder.Entity("EcommerceApi.Data.Producto", b =>
                {
                    b.Navigation("ItemCarritos");

                    b.Navigation("ItemOrdenes");
                });

            modelBuilder.Entity("EcommerceApi.Data.Role", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("EcommerceApi.Data.Usuario", b =>
                {
                    b.Navigation("Carritos");

                    b.Navigation("Ordenes");
                });
#pragma warning restore 612, 618
        }
    }
}
